# Docker Compose configuration for ZodiaCore staging environment
# Includes monitoring stack (Prometheus + Grafana) for testing logging, metrics, and health checks
# Follows microservices architecture with independent services and monitoring

version: '3.8'

services:
  # MongoDB Database Service
  # Local MongoDB instance for staging (production uses MongoDB Atlas)
  # Configured with authentication and health checks for reliability
  mongodb:
    image: mongo:7.0
    container_name: zodiacore-staging-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: zodiacore
    ports:
      - '27017:27017'
    volumes:
      - mongodb_staging_data:/data/db
      - ./backend/databases/init:/docker-entrypoint-initdb.d
    networks:
      - zodiacore-staging-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: zodiacore-staging-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_staging_data:/data
    networks:
      - zodiacore-staging-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Gateway Service
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: zodiacore-staging-api-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3000
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zodiacore?authSource=admin
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
      METRICS_UPDATE_INTERVAL: 30
      CORRELATION_ID_HEADER: X-Correlation-ID
    ports:
      - '3000:3000'
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zodiacore-staging-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Vedic Astrology Service
  vedic-service:
    build:
      context: ./services/vedic-service
      dockerfile: Dockerfile
    container_name: zodiacore-staging-vedic-service
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3001
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zodiacore?authSource=admin
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
      METRICS_UPDATE_INTERVAL: 30
      CORRELATION_ID_HEADER: X-Correlation-ID
    ports:
      - '3001:3001'
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zodiacore-staging-network
    volumes:
      - ./services/vedic-service:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Western Astrology Service
  western-service:
    build:
      context: ./services/western-service
      dockerfile: Dockerfile
    container_name: zodiacore-staging-western-service
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3002
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zodiacore?authSource=admin
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
      METRICS_UPDATE_INTERVAL: 30
      CORRELATION_ID_HEADER: X-Correlation-ID
    ports:
      - '3002:3002'
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zodiacore-staging-network
    volumes:
      - ./services/western-service:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Mundane Astrology Service (for testing)
  mundane-service:
    build:
      context: ./services/mundane-service
      dockerfile: Dockerfile
    container_name: zodiacore-staging-mundane-service
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3003
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zodiacore?authSource=admin
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
      METRICS_UPDATE_INTERVAL: 30
      CORRELATION_ID_HEADER: X-Correlation-ID
    ports:
      - '3003:3003'
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zodiacore-staging-network
    volumes:
      - ./services/mundane-service:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring Service
  prometheus:
    image: prom/prometheus:latest
    container_name: zodiacore-staging-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    networks:
      - zodiacore-staging-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:9090/-/healthy',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard Service
  grafana:
    image: grafana/grafana:latest
    container_name: zodiacore-staging-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: 'grafana-piechart-panel'
    ports:
      - '3004:3000'
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/zodia-core-dashboard.json:/var/lib/grafana/dashboards/zodia-core-dashboard.json:ro
    networks:
      - zodiacore-staging-network
    depends_on:
      - prometheus
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:3000/api/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_staging_data:
  redis_staging_data:
  prometheus_staging_data:
  grafana_staging_data:

networks:
  zodiacore-staging-network:
    driver: bridge
