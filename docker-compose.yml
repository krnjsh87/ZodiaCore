version: '3.8'

services:
  # MongoDB Database Service
  mongodb:
    image: mongo:7.0
    container_name: zodiacore-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: zodiacore
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/databases/init:/docker-entrypoint-initdb.d
    networks:
      - zodiacore-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: zodiacore-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zodiacore-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Gateway Service
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: zodiacore-api-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zodiacore?authSource=admin
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zodiacore-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vedic Astrology Service
  vedic-service:
    build:
      context: ./services/vedic-service
      dockerfile: Dockerfile
    container_name: zodiacore-vedic-service
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zodiacore?authSource=admin
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zodiacore-network
    volumes:
      - ./services/vedic-service:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Western Astrology Service
  western-service:
    build:
      context: ./services/western-service
      dockerfile: Dockerfile
    container_name: zodiacore-western-service
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3002
      MONGODB_URI: mongodb://admin:password@mongodb:27017/zodiacore?authSource=admin
      REDIS_URL: redis://redis:6379
    ports:
      - "3002:3002"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zodiacore-network
    volumes:
      - ./services/western-service:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: zodiacore-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3000
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3003:3000"
    depends_on:
      - api-gateway
    networks:
      - zodiacore-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
  redis_data:

networks:
  zodiacore-network:
    driver: bridge