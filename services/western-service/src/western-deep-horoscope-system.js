/**
 * Western Deep Horoscope System
 * ZC3.12 Western Astrology Deep Horoscope/Life Interpretation System
 *
 * Main system class that provides the public API for generating
 * comprehensive Western astrology deep horoscope interpretations.
 */

const { WesternDeepHoroscopeInterpreter } = require('./western-deep-horoscope-interpreter');

class WesternDeepHoroscopeSystem {
    constructor() {
        this.interpreter = null;
    }

    /**
     * Generate deep horoscope interpretation
     * @param {Object} birthData - Birth information
     * @param {Date} currentDate - Current date for predictions
     * @returns {Object} Complete interpretation
     */
    async generateDeepHoroscope(birthData, currentDate = new Date()) {
        try {
            // Validate birth data
            this._validateBirthData(birthData);

            // Create mock birth chart (in real implementation, this would come from birth chart generator)
            const birthChart = this._createMockBirthChart(birthData);

            // Create interpreter
            this.interpreter = new WesternDeepHoroscopeInterpreter(birthChart);

            // Generate interpretation
            const interpretation = await this.interpreter.generateDeepInterpretation(currentDate);

            // Format output
            return this._formatInterpretationOutput(interpretation, birthData);

        } catch (error) {
            throw new Error(`Deep horoscope generation failed: ${error.message}`);
        }
    }

    /**
     * Validate birth data
     * @param {Object} birthData - Birth data to validate
     * @private
     */
    _validateBirthData(birthData) {
        const required = ['year', 'month', 'day', 'hour', 'minute'];

        for (const field of required) {
            if (birthData[field] === undefined || birthData[field] === null) {
                throw new Error(`Missing required field: ${field}`);
            }
        }

        if (birthData.year < 1800 || birthData.year > 2100) {
            throw new Error('Year must be between 1800 and 2100');
        }

        if (birthData.month < 1 || birthData.month > 12) {
            throw new Error('Month must be between 1 and 12');
        }

        if (birthData.day < 1 || birthData.day > 31) {
            throw new Error('Day must be between 1 and 31');
        }
    }

    /**
     * Create mock birth chart for demonstration
     * In production, this would use the actual Western birth chart generator
     * @param {Object} birthData - Birth data
     * @returns {Object} Mock birth chart
     * @private
     */
    _createMockBirthChart(birthData) {
        // This is a simplified mock - in real implementation,
        // this would be generated by the Western birth chart generator
        return {
            birthData: birthData,
            ascendant: {
                sign: 'Leo',
                degree: 15.5
            },
            planets: {
                SUN: { sign: 'Leo', longitude: 135, house: 1 },
                MOON: { sign: 'Cancer', longitude: 105, house: 12 },
                MERCURY: { sign: 'Leo', longitude: 142, house: 1 },
                VENUS: { sign: 'Virgo', longitude: 165, house: 2 },
                MARS: { sign: 'Gemini', longitude: 78, house: 11 },
                JUPITER: { sign: 'Sagittarius', longitude: 245, house: 6 },
                SATURN: { sign: 'Capricorn', longitude: 285, house: 7 }
            },
            houses: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330]
        };
    }

    /**
     * Format interpretation output
     * @param {Object} interpretation - Raw interpretation
     * @param {Object} birthData - Original birth data
     * @returns {Object} Formatted output
     * @private
     */
    _formatInterpretationOutput(interpretation, birthData) {
        return {
            // Metadata
            generatedAt: new Date().toISOString(),
            version: 'ZC3.12',
            confidence: interpretation.confidence,

            // Basic Information
            basicInfo: {
                name: birthData.name || 'Anonymous',
                birthDetails: birthData,
                chartInfo: interpretation.chartInfo
            },

            // Planetary Analysis
            planetaryAnalysis: interpretation.planetaryAnalysis,

            // Life Areas
            lifeAreas: interpretation.lifeAreas,

            // Aspects and Configurations
            aspects: interpretation.aspects,

            // Predictions
            predictions: interpretation.predictions,

            // Current Period
            currentPeriod: interpretation.currentPeriod,

            // Remedies
            remedies: interpretation.remedies,

            // Overall Assessment
            overallAssessment: interpretation.overallAssessment,

            // Recommendations
            recommendations: this._generateRecommendations(interpretation)
        };
    }

    /**
     * Generate final recommendations
     * @param {Object} interpretation - Interpretation data
     * @returns {Array} Recommendations
     * @private
     */
    _generateRecommendations(interpretation) {
        const recommendations = [];

        // Based on overall assessment
        if (interpretation.overallAssessment.chartStrength < 0.5) {
            recommendations.push({
                type: 'General',
                priority: 'High',
                text: 'Consider consulting with a professional astrologer for personalized guidance'
            });
        }

        // Based on remedies
        if (interpretation.remedies.priority.critical.length > 0) {
            recommendations.push({
                type: 'Remedial',
                priority: 'Critical',
                text: 'Focus on critical remedial measures for challenging planetary influences'
            });
        }

        // Life area focus
        const weakAreas = interpretation.overallAssessment.strongAreas || [];
        if (weakAreas.length > 0) {
            recommendations.push({
                type: 'Development',
                priority: 'Medium',
                text: `Focus on strengthening life areas: ${weakAreas.join(', ')}`
            });
        }

        return recommendations;
    }

    /**
     * Get system health status
     * @returns {Object} Health status
     */
    getHealthStatus() {
        return {
            status: 'healthy',
            version: 'ZC3.12',
            components: {
                interpreter: this.interpreter ? 'loaded' : 'not loaded',
                dignityCalculator: 'available',
                aspectDetector: 'available',
                lifeAreaAnalyzer: 'available',
                predictiveAnalyzer: 'available',
                remedyGenerator: 'available'
            },
            lastUsed: new Date().toISOString()
        };
    }

    /**
     * Validate interpretation data
     * @param {Object} interpretation - Interpretation to validate
     * @param {Object} referenceData - Reference data for validation
     * @returns {Object} Validation results
     */
    validateInterpretation(interpretation, referenceData) {
        const results = {
            isValid: true,
            errors: [],
            warnings: []
        };

        // Check required fields
        const requiredFields = [
            'chartInfo', 'planetaryAnalysis', 'lifeAreas',
            'aspects', 'predictions', 'remedies', 'overallAssessment'
        ];

        for (const field of requiredFields) {
            if (!interpretation[field]) {
                results.errors.push(`Missing required field: ${field}`);
                results.isValid = false;
            }
        }

        // Check confidence level
        if (interpretation.confidence < 0 || interpretation.confidence > 1) {
            results.errors.push('Confidence must be between 0 and 1');
            results.isValid = false;
        }

        // Check chart strength
        if (interpretation.overallAssessment?.chartStrength !== undefined) {
            if (interpretation.overallAssessment.chartStrength < 0 ||
                interpretation.overallAssessment.chartStrength > 1) {
                results.warnings.push('Chart strength should be between 0 and 1');
            }
        }

        return results;
    }
}

module.exports = {
    WesternDeepHoroscopeSystem
};